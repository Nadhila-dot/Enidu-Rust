name: Rust Cross-Compile

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-pc-windows-gnu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup Rust toolchain
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      # Install dependencies for cross compilation
      - name: Install cross-compilers and libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libssl-dev \
            gcc-mingw-w64 \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            musl-tools \
            musl-dev

      # Set up environment for musl targets (to fix pkg-config cross-compilation)
      - name: Configure for musl targets
        if: contains(matrix.target, 'musl')
        run: |
          echo "Building Rust project for nadhi.dev...."
          # Point pkg-config to musl's sysroot
          export PKG_CONFIG_SYSROOT_DIR=/usr/x86_64-linux-musl
          export PKG_CONFIG_PATH=/usr/x86_64-linux-musl/lib/pkgconfig:$PKG_CONFIG_PATH
          # Vendor OpenSSL to avoid system dependency issues
          export OPENSSL_STATIC=1
          export OPENSSL_DIR=/usr
          echo "PKG_CONFIG_SYSROOT_DIR=$PKG_CONFIG_SYSROOT_DIR" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV

      # Build the project
      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      # Upload the compiled binaries
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/